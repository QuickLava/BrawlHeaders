#pragma once

#include <so/stageobject.h>
#include <StaticAssert.h>
#include <types.h>
#include <so/anim/so_anim_cmd_event_presenter.h>
#include <so/controller/so_controller_impl.h>
#include <so/link/so_link_event_presenter.h>
#include <so/link/so_link_connection_server.h>
#include <so/so_null.h>

class soLinkModule : public soNullable {
public:
    soLinkModule() { }
    virtual ~soLinkModule() { };
    virtual void activate() = 0;
    virtual void deactivate() = 0;
    virtual void link() = 0;
    virtual void unlinkAll() = 0;
    virtual void unlinkNode() = 0;
    virtual void unlinkNodeAll() = 0;
    virtual void unlink() = 0;
    virtual void isLink() = 0;
    virtual void isLinked() = 0;
    virtual void getParent() = 0;
    virtual void searchParent() = 0;
    virtual StageObject* searchParentAttr(u32 p1) = 0;
    virtual void searchNode() = 0;
    virtual void sendEventParents() = 0;
    virtual void sendEventNodes() = 0;
    virtual void sendEventNodes(u32 overload_fixme) = 0;
    virtual void getNode() = 0;
    virtual void getNodeTaskId() = 0;
    virtual void isNodeDamageReaction() = 0;
    virtual void isNodeDamageCaptureCut() = 0;
    virtual void getParentModelLoupeNo() = 0;
    virtual void chkLinkStop() = 0;
    virtual void toLinkStop() = 0;
    virtual void leaveLinkStop() = 0;
    virtual void isValidLinkStop() = 0;
    virtual void chkLinkShake() = 0;
    virtual void getLinkColorBlend() = 0;
    virtual void getLinkLightSet() = 0;
    virtual void chkLinkVisibility() = 0;
    virtual soController* getLinkController() = 0;
    virtual void getLinkScale() = 0;
    virtual void getParentScale() = 0;
    virtual void adjustLinkGroundCollision() = 0;
    virtual void setConstraint2ndWind() = 0;
    virtual void getParentModelNodeGlobalPosition() = 0;
    virtual void getParentModelNodeGlobalPosition(u32 overload_fixme) = 0;
    virtual void getParentMotionFrame() = 0;
    virtual void getParentSituationKind() = 0;
    virtual void getParentLr() = 0;
    virtual void getParentSumSpeed() = 0;
    virtual void getParentTaskId() = 0;
    virtual void getParentRot() = 0;
    virtual void getParentDamage() = 0;
    virtual void getParentDamageReaction() = 0;
    virtual void getParentDamagePowerMax() = 0;
    virtual void setNodeScalePowerMul() = 0;
    virtual void isParentDamageReaction() = 0;
    virtual void isParentDamageCatchCut() = 0;
    virtual void getParentTotalHitStatus() = 0;
    virtual void getParentAnmFile() = 0;
    virtual void isValidParentShape() = 0;
    virtual void getParentShapeCenterPos() = 0;
    virtual void getParentShapeCenterPosTaskId() = 0;
    virtual void getOwnerAttackPowerMulArticle() = 0;
    virtual void isParentEnableEnvMap() = 0;
    virtual void isParentRefFB() = 0;
    virtual void getParentTexResourceId() = 0;
    virtual void isParentEffectSyncScale() = 0;
    virtual void sendEnvMapNodes() = 0;
    virtual void isParentGlow() = 0;
    virtual void getParentGlowAttack() = 0;
    virtual void getParentWeaponGlowAttack() = 0;
    virtual void getParentWeaponGlowDefense() = 0;
    virtual void getParentGlowAttackAdd() = 0;
    virtual void getParentWeaponGlowEff() = 0;
    virtual void getParentWeaponGlowDamageMin() = 0;
    virtual void getParentWeaponGlowDamageMax() = 0;
    virtual void setParentHitStopFrame() = 0;
    virtual void setParentAttackerInfo() = 0;
    virtual void getParentAttachItemVisibility() = 0;
    virtual void isParentEnableSubColor() = 0;
    virtual void getParentSubColor() = 0;
    virtual void correctParent2ndBoth() = 0;
    virtual void setModelConstraintPosOrt() = 0;
    virtual void setModelConstraintPosOrt(u32 overload_fixme) = 0;
    virtual void setModelConstraintAttribute() = 0;
    virtual void getModelConstraintFlag() = 0;
    virtual void setModelConstraintFlag() = 0;
    virtual void offModelConstraintFlag() = 0;
    virtual void getModelConstraintNode() = 0;
    virtual void setModelConstraintNode() = 0;
    virtual void setModelConstraintTargetNode() = 0;
    virtual void getModelConstraintNo() = 0;
    virtual void adjustModelConstraintPosture() = 0;
    virtual void adjustModelConstraintPosture(u32 overload_fixme) = 0;
    virtual void removeModelConstraint() = 0;
    virtual void isModelConstraint() = 0;
    virtual void isModelConstraintMutual() = 0;
    virtual void getModelConstraintTargetNodeWorldMtx() = 0;
    virtual void getModelConstraintTargetNodePosition() = 0;
    virtual void getModelConstraintNodeGlobalPosition() = 0;
    virtual void getModelConstraintNodeGlobalPositionRecursive() = 0;
    virtual void getModelConstraintTargetNodeRotation() = 0;
    virtual void getNodeRotation() = 0;
    virtual void getConstraintModelScale() = 0;
    virtual void setUpModelConstraintTargetMtx() = 0;
    virtual void calcModelConstraintNodeMtx() = 0;
    virtual void setAttribute() = 0;
    virtual void chkAttribute() = 0;
    virtual void chkLinkedAttribute() = 0;
    virtual void getAnmFile() = 0;
    virtual void setAnmFileTransactorLinkNo() = 0;
    virtual void getLinkSlopeStatus() = 0;
    virtual void getLinkSlopeRotation() = 0;
    virtual void generateArticleLinkParents() = 0;
    virtual void kParents() = 0;
    virtual void isLinkParentSlow() = 0;
    virtual void getLinkParentSlowInfo() = 0;
    virtual void getLinkParentCameraInfo() = 0;
    virtual void isNodeGroundCrush() = 0;
};

class soLinkModuleImpl : public soLinkModule, public soAnimCmdEventObserver {
public:
    soLinkModuleImpl(short unitID) : soAnimCmdEventObserver(unitID) { }
    virtual ~soLinkModuleImpl();
    virtual void activate();
    virtual void deactivate();
    virtual void link();
    virtual void unlinkAll();
    virtual void unlinkNode();
    virtual void unlinkNodeAll();
    virtual void unlink();
    virtual void isLink();
    virtual void isLinked();
    virtual void getParent();
    virtual void searchParent();
    virtual StageObject* searchParentAttr(u32 p1);
    virtual void searchNode();
    virtual void sendEventParents();
    virtual void sendEventNodes();
    virtual void sendEventNodes(u32 overload_fixme);
    virtual void getNode();
    virtual void getNodeTaskId();
    virtual void isNodeDamageReaction();
    virtual void isNodeDamageCaptureCut();
    virtual void getParentModelLoupeNo();
    virtual void chkLinkStop();
    virtual void toLinkStop();
    virtual void leaveLinkStop();
    virtual void isValidLinkStop();
    virtual void chkLinkShake();
    virtual void getLinkColorBlend();
    virtual void getLinkLightSet();
    virtual void chkLinkVisibility();
    virtual soController* getLinkController();
    virtual void getLinkScale();
    virtual void getParentScale();
    virtual void adjustLinkGroundCollision();
    virtual void setConstraint2ndWind();
    virtual void getParentModelNodeGlobalPosition();
    virtual void getParentModelNodeGlobalPosition(u32 overload_fixme);
    virtual void getParentMotionFrame();
    virtual void getParentSituationKind();
    virtual void getParentLr();
    virtual void getParentSumSpeed();
    virtual void getParentTaskId();
    virtual void getParentRot();
    virtual void getParentDamage();
    virtual void getParentDamageReaction();
    virtual void getParentDamagePowerMax();
    virtual void setNodeScalePowerMul();
    virtual void isParentDamageReaction();
    virtual void isParentDamageCatchCut();
    virtual void getParentTotalHitStatus();
    virtual void getParentAnmFile();
    virtual void isValidParentShape();
    virtual void getParentShapeCenterPos();
    virtual void getParentShapeCenterPosTaskId();
    virtual void getOwnerAttackPowerMulArticle();
    virtual void isParentEnableEnvMap();
    virtual void isParentRefFB();
    virtual void getParentTexResourceId();
    virtual void isParentEffectSyncScale();
    virtual void sendEnvMapNodes();
    virtual void isParentGlow();
    virtual void getParentGlowAttack();
    virtual void getParentWeaponGlowAttack();
    virtual void getParentWeaponGlowDefense();
    virtual void getParentGlowAttackAdd();
    virtual void getParentWeaponGlowEff();
    virtual void getParentWeaponGlowDamageMin();
    virtual void getParentWeaponGlowDamageMax();
    virtual void setParentHitStopFrame();
    virtual void setParentAttackerInfo();
    virtual void getParentAttachItemVisibility();
    virtual void isParentEnableSubColor();
    virtual void getParentSubColor();
    virtual void correctParent2ndBoth();
    virtual void setModelConstraintPosOrt();
    virtual void setModelConstraintPosOrt(u32 overload_fixme);
    virtual void setModelConstraintAttribute();
    virtual void getModelConstraintFlag();
    virtual void setModelConstraintFlag();
    virtual void offModelConstraintFlag();
    virtual void getModelConstraintNode();
    virtual void setModelConstraintNode();
    virtual void setModelConstraintTargetNode();
    virtual void getModelConstraintNo();
    virtual void adjustModelConstraintPosture();
    virtual void adjustModelConstraintPosture(u32 overload_fixme);
    virtual void removeModelConstraint();
    virtual void isModelConstraint();
    virtual void isModelConstraintMutual();
    virtual void getModelConstraintTargetNodeWorldMtx();
    virtual void getModelConstraintTargetNodePosition();
    virtual void getModelConstraintNodeGlobalPosition();
    virtual void getModelConstraintNodeGlobalPositionRecursive();
    virtual void getModelConstraintTargetNodeRotation();
    virtual void getNodeRotation();
    virtual void getConstraintModelScale();
    virtual void setUpModelConstraintTargetMtx();
    virtual void calcModelConstraintNodeMtx();
    virtual void setAttribute();
    virtual void chkAttribute();
    virtual void chkLinkedAttribute();
    virtual void getAnmFile();
    virtual void setAnmFileTransactorLinkNo();
    virtual void getLinkSlopeStatus();
    virtual void getLinkSlopeRotation();
    virtual void generateArticleLinkParents();
    virtual void kParents();
    virtual void isLinkParentSlow();
    virtual void getLinkParentSlowInfo();
    virtual void getLinkParentCameraInfo();
    virtual void isNodeGroundCrush();
};
